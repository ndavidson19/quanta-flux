version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: -1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS: 60000
    volumes:
      - kafka-data:/var/lib/kafka/data

  ibkr:
    image: ghcr.io/extrange/ibkr:10.29.1g
    ports:
      - "6080:6080" # noVNC browser access
      - "8888:8888" # API access
    ulimits:
      nofile: 10000 # See FAQ
    environment:
      USERNAME: ${IB_USERNAME}
      PASSWORD: ${IB_PASSWORD}
      GATEWAY_OR_TWS: gateway # Specify to use gateway instead of TWS
      IBC_TradingMode: paper # Specify to use paper trading
      IBC_AcceptNonBrokerageAccountWarning: "yes"
    depends_on:
      - kafka
      - timescaledb

  timescaledb:
    image: timescale/timescaledb:latest-pg14
    environment:
      POSTGRES_USER: ${TIMESCALE_USER:-user}
      POSTGRES_PASSWORD: ${TIMESCALE_PASSWORD:-password}
      POSTGRES_DB: ${TIMESCALE_DB:-marketdata}
    ports:
      - "5432:5432"
    volumes:
      - timescale-data:/var/lib/postgresql/data

  etl-app:
    build: .
    depends_on:
      - kafka
      - ibkr
      - timescaledb
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - DUCKDB_FILE=/data/market_data.db
      - LOG_LEVEL=INFO
      - IB_HOST=ibkr
      - IB_PORT=8888
      - TIMESCALE_HOST=timescaledb
      - TIMESCALE_PORT=5432
      - TIMESCALE_USER=${TIMESCALE_USER:-user}
      - TIMESCALE_PASSWORD=${TIMESCALE_PASSWORD:-password}
      - TIMESCALE_DB=${TIMESCALE_DB:-marketdata}
    volumes:
      - ./data:/data
      - ./wait-for-it.sh:/wait-for-it.sh
    command: >
      /bin/bash -c "
        /wait-for-it.sh kafka 9092 &&
        /wait-for-it.sh timescaledb 5432 &&
        /wait-for-it.sh ibkr 8888 &&
        echo 'Waiting for 60 seconds to ensure IBKR is fully initialized...' &&
        sleep 60 &&
        python main.py
      "
  flink-jobmanager:
    build:
      context: .
      dockerfile: Dockerfile.flink
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        parallelism.default: 2

  flink-taskmanager:
    build:
      context: .
      dockerfile: Dockerfile.flink
    depends_on:
      - flink-jobmanager
    command: taskmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 2

  spark-master:
    image: bitnami/spark:latest
    environment:
      - SPARK_MODE=master
    ports:
      - "8080:8080"
      - "7077:7077"

  spark-worker:
    image: bitnami/spark:latest
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    depends_on:
      - spark-master

  dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    volumes:
      - .:/app
    ports:
      - "8888:8888"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - DUCKDB_FILE=/app/data/market_data.db
      - LOG_LEVEL=DEBUG
      - IB_HOST=ibkr
      - IB_PORT=8888
      - TIMESCALE_HOST=timescaledb
      - TIMESCALE_PORT=5432
      - TIMESCALE_USER=${TIMESCALE_USER:-user}
      - TIMESCALE_PASSWORD=${TIMESCALE_PASSWORD:-password}
      - TIMESCALE_DB=${TIMESCALE_DB:-marketdata}
      - FLINK_JOBMANAGER_HOST=flink-jobmanager
      - FLINK_JOBMANAGER_PORT=8081
    command: jupyter notebook --ip=0.0.0.0 --port=8888 --no-browser --allow-root

volumes:
  zookeeper-data:
  zookeeper-log:
  timescale-data:
  kafka-data:
